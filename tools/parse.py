import eve
from eve import align
import zlib
import array
import struct
import binascii

TOUCH_CONFIG = [
	0xffffff1a, 0x00302020, 0x00000004, 0x00000002, 0xffffff22,
	0x0030b000, 0x54edda78, 0x45546fdd, 0xb3333f14, 0x6594a05d,
	0x2c054c6f, 0xa16f7b8d, 0x109adb0b, 0xe5111009, 0x0b1a4b9c,
	0x03e3150d, 0xb3b8fc10, 0x2d8fdb2d, 0x48907d29, 0x47966443,
	0x241271bd, 0xa564a511, 0x112010c6, 0x80f0c495, 0x26a410a1,
	0xd100f036, 0x260f8248, 0x5242307d, 0x1f134c1e, 0x8b2e67ac,
	0xe304ff18, 0x339ccc9d, 0xe7ce6673, 0xaa05dcef, 0x4b89815e,
	0x5e62d8c2, 0x79737567, 0x7db1834c, 0x7b527d59, 0x8e3af33c,
	0xf3b9ccf2, 0xe39c76bc, 0xeeeecb9b, 0xe5cdfbc3, 0xa91c5c47,
	0x8f54b8be, 0xf4358971, 0x57edb567, 0xe98971fd, 0xa5c60c30,
	0x198b68b5, 0x729bfd54, 0x3600bf4a, 0x3e0ca38a, 0x1781cf83,
	0x1f5b22d9, 0xa3f64180, 0x9308d5af, 0xcb236bd5, 0x6f036c5e,
	0x1853ab28, 0xdeb1a50f, 0xbc176174, 0x2a96ce8c, 0x4e57b566,
	0x86aab656, 0x1a79f1d7, 0x4c02fcf3, 0xde8bd973, 0x8488adce,
	0xb9233d51, 0x2e177127, 0x36b24cc7, 0x00e0b797, 0x951cbd28,
	0x4f833ab6, 0x224c1e98, 0xd8a2ea62, 0x27668d85, 0x65c028aa,
	0xbf92c935, 0xb12c4d25, 0x05d34ad1, 0x0605bbce, 0x60352fd8,
	0x6732167b, 0x1154c0fb, 0x38b9e34a, 0xa15b336a, 0x30a3b660,
	0x418b8dab, 0x0b424298, 0x4b9e2b66, 0xb8935024, 0x11708b93,
	0x6f67d8eb, 0x0a5cf5ef, 0x2c28c2af, 0x3b057d3a, 0xf5673270,
	0x05c04e04, 0x3c33c29c, 0x6e4b86bf, 0xc02eedad, 0x73c09c79,
	0x4378dab8, 0x0b2e733f, 0xe8610a66, 0xb672eb32, 0x29b27694,
	0x4d870cbc, 0x600c7cca, 0xeaa123ee, 0xf91781bd, 0x19e68bd4,
	0x34cd3035, 0x3575a35d, 0x5551aa9a, 0x4546b2a3, 0x0ef1a742,
	0xe201f12e, 0xc5b39888, 0xfe94b83b, 0x0f308431, 0x4cc089b0,
	0x6869c483, 0xa05156a2, 0xad1affa5, 0x915689a2, 0x37c0b7d2,
	0x3cd3c2af, 0xb8e6785b, 0x83291bae, 0x1de0289b, 0x10e8b357,
	0xa5073737, 0xa5175193, 0xe0366531, 0x6c51b44b, 0x45e21d12,
	0xe0af6ee1, 0x2f19d42a, 0xea6ec182, 0x38fcd7c0, 0x2e18a24a,
	0x6a36aefb, 0x090ef544, 0x7816a09b, 0x1df068cf, 0x1c8cb25a,
	0xa62fdc18, 0xd0fb3d70, 0xef386fc0, 0xfbff5dee, 0xc120633e,
	0xebbe3d4b, 0xda6ee57b, 0xe14f55c2, 0xee14623b, 0x0bdcebe3,
	0xb41995dd, 0x6f9fc274, 0xd518c060, 0x9cb38b3b, 0x13e645d7,
	0x75872318, 0xa2ceabce, 0x3dea8143, 0x67680beb, 0xa7df4054,
	0x65a328fe, 0x962b545c, 0xcddbf92e, 0x5b0b7407, 0x4b393d68,
	0x193008df, 0xdefc771c, 0xf9563171, 0x9cd3b44a, 0xa8d73db5,
	0xc7fb079d, 0x5bfaf296, 0x795e843a, 0x8b973507, 0x99a50662,
	0x6e20d645, 0x1f6564d3, 0x62512d59, 0xc5cdcd17, 0xc6ba6dd1,
	0xf9bf8d23, 0xdf843c19, 0x1462fb99, 0x148b92ef, 0xfa29fad9,
	0x5ab13a89, 0x6c334f39, 0xc2fd14e9, 0xcdde31bb, 0x30608d72,
	0x366bdbaf, 0x9a168a6f, 0x3a4f6c67, 0x4fb2b3fc, 0x9902c3a4,
	0xc7aa2724, 0x55c5a7c9, 0xb13b086a, 0x02382e51, 0x11724be6,
	0x41bc7037, 0x724d89d0, 0x3a37730a, 0x7aadc5d0, 0x6e8c0657,
	0xa37cd02a, 0x68f16c46, 0xd662f512, 0x2a3586bb, 0x85b616dd,
	0xb19474d3, 0x55c0d1c2, 0x373ac75a, 0x13e502cb, 0xe4a1bb89,
	0x91cb709a, 0xdcbcf47d, 0xc929e476, 0x90c329b5, 0x5033b7d7,
	0x10d915fa, 0x6debc8d9, 0xda7abce3, 0xe0aa3c8e, 0x82b8f070,
	0x0571e0e5, 0x50a394df, 0xbb82b7a5, 0xee407484, 0x73dc55a1,
	0xe362cd8b, 0x7d661df4, 0x7bf32507, 0x5c1a0bdf, 0x3d74f33f,
	0xf47b8abf, 0x4aba54a0, 0xf7ae051f, 0xf8c78777, 0x61f287fd,
	0x90be9166, 0xddee550e, 0x309ec1e7, 0xf87819cd, 0x9e1ddc0f,
	0x1eb94609, 0xfe21e567, 0xaca0ed17, 0xde5ac13e, 0xc80ee8e0,
	0x8e685a38, 0x066e78e3, 0x41cbd315, 0xdc976396, 0x32a457f7,
	0xeaef319f, 0x6d008e3a, 0x4f127b6c, 0xf86424e3, 0x7f60cdde,
	0xe4ab1a78, 0x11243f45, 0x7411c8fc, 0x58e3bbf2, 0x4b02f78f,
	0x3b8206bf, 0xf0370bbc, 0x987af31f, 0x9acfb7e2, 0xdb27bc49,
	0x57de692b, 0x8c8d8f29, 0xb87049af, 0x10b83dfc, 0xa823fa5a,
	0x39b07752, 0x96c85e74, 0x2cb3be16, 0x54eb0c68, 0x59fc6695,
	0xe463c19a, 0xf87df26a, 0xdfffc240, 0x0b53f27f, 0xd64602ff,
	0x000080e2, 0xffffff1a, 0x00302114, 0x00000004, 0x0000000f,
	0xffffff1a, 0x00302020, 0x00000004, 0x00000000
]


def hexdump(data: bytes, addr: int = 0):
    STEP = 16
    for i in range(0, len(data), STEP):
        hex = binascii.hexlify(data[i:i+STEP], ' ').decode()
        text = bytes([ord('.') if (c < 32 or c >= 127) else c for c in data[i:i+STEP]]).decode()
        print(f'  {addr + i:06x}: {hex}  {text}')


def inflate(data: bytes) -> int:
    obj = zlib.decompressobj()
    decompressed_data = obj.decompress(data)
    unused_data = obj.unused_data
    print('DECOMPRESSED')
    hexdump(decompressed_data)
    print('UNUSED')
    hexdump(unused_data)

    used_len = len(data) - len(unused_data)
    print(f'data {len(data)}, unused {len(unused_data)}, used {used_len}, aligned {align(used_len)}')
    data = unused_data[align(used_len) - used_len:]
    print('REMAIN')
    hexdump(data)

    return align(used_len)


def parse(data: bytes):
    i = 0
    while i < len(data):
        code, = struct.unpack('<L', data[i:i+4])
        # print(f'Get {code:08x}')
        cmd = eve.get_command(code)
        args, size = cmd.unpack(data[i:])
        # print(f'{cmd.name}, {size}')
        arglist = []
        for arg in args:
            # if arg.param.typedef.bitcount:
            #     s = f'0x{arg.value:x}'
            # else:
            #     s = binascii.hexlify(data[i:i+STEP], ' ').decode()
            # print(f'  {arg.param.name} = {arg.value}')
            arglist.append(f'{arg.param.name}={arg.value}')
        print(f'{cmd.name}({", ".join(arglist)})')
        hexdump(data[i:i+size])
        if cmd.code == 0x22: # INFLATE
            used = inflate(data[i+8:])
            i += 8 + used
        else:
            i += size


if __name__ == '__main__':
    # data = struct.pack(f'<{len(TOUCH_CONFIG)}L', *TOUCH_CONFIG)
    # parse(data)
    parse(TEST_DISPLAYLIST)
